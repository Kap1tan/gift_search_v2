import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='[%(levelname)s] %(message)s',
    level=logging.INFO
)
logger = logging.getLogger()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏)
CONFIG = {
    'TOKEN': '7064434574:AAG9TuO_wlzmyWg4m68uj_T4j8g3HkXPe-Q',
    'ORIGINAL_ADMINS': {804644988, 7403767874},  # –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã
    'ADMINS': {804644988, 7403767874},  # –ö–æ–ø–∏—è –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    'USERS': set()
}


class GiftBot:
    def __init__(self):
        self.sessions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    async def _reply(self, update: Update, text: str, reply_markup=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=text,
                    reply_markup=reply_markup,
                    disable_web_page_preview=False
                )
            else:
                await update.message.reply_text(
                    text=text,
                    reply_markup=reply_markup,
                    disable_web_page_preview=False
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in CONFIG['ADMINS'] and user_id not in CONFIG['USERS']:
            await self._reply(update, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        self.sessions[user_id] = {'step': 'name'}
        await self._reply(update, "üîç –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞:")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in self.sessions:
            return

        text = update.message.text
        session = self.sessions[user_id]

        if session['step'] == 'name':
            session.update({'name': text, 'step': 'number'})
            await self._reply(update, "üî¢ –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä:")

        elif session['step'] == 'number':
            try:
                num = int(text)
                await self._show_gift(update, user_id, num)
            except ValueError:
                await self._reply(update, "‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ!")

    async def _show_gift(self, update: Update, user_id: int, num: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        name = self.sessions[user_id]['name']
        link = f"https://t.me/nft/{name}-{num}"

        await self._reply(
            update,
            f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ (#{num}):\n{link}",
            InlineKeyboardMarkup([
                [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π ‚Üí", callback_data=f"next_{num + 1}_{name}")],
                [InlineKeyboardButton("–ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data='new')]
            ])
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        user_id = update.effective_user.id

        try:
            if query.data == 'new':
                self.sessions[user_id] = {'step': 'name'}
                await self._reply(update, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")

            elif query.data.startswith('next_'):
                _, num, name = query.data.split('_', 2)
                await self._reply(
                    update,
                    f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ (#{num}):\nhttps://t.me/nft/{name}-{num}",
                    InlineKeyboardMarkup([
                        [InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π ‚Üí", callback_data=f"next_{int(num) + 1}_{name}")],
                        [InlineKeyboardButton("–ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data='new')]
                    ])
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ callback: {e}")
            await self._reply(update, "‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Å—Ç–∞—Ä—ã–µ)
    async def add_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in CONFIG['ADMINS']:
            return

        try:
            new_admin = int(context.args[0])
            CONFIG['ADMINS'].add(new_admin)
            await self._reply(update, f"‚úÖ –ê–¥–º–∏–Ω {new_admin} –¥–æ–±–∞–≤–ª–µ–Ω")
        except:
            await self._reply(update, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_admin <ID>")

    async def remove_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in CONFIG['ADMINS']:
            return

        try:
            admin_id = int(context.args[0])
            if admin_id == update.effective_user.id:
                await self._reply(update, "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            elif admin_id in CONFIG['ADMINS']:
                CONFIG['ADMINS'].remove(admin_id)
                await self._reply(update, f"‚úÖ –ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–µ–Ω")
            else:
                await self._reply(update, "‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except:
            await self._reply(update, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_admin <ID>")

    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)
    async def add_admin_special(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in CONFIG['ORIGINAL_ADMINS']:
            await self._reply(update, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        try:
            new_admin = int(context.args[0])
            CONFIG['ADMINS'].add(new_admin)
            await self._reply(update, f"‚úÖ –ê–¥–º–∏–Ω {new_admin} –¥–æ–±–∞–≤–ª–µ–Ω")
        except:
            await self._reply(update, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /qwerty <ID>")

    async def remove_admin_special(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in CONFIG['ORIGINAL_ADMINS']:
            await self._reply(update, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        try:
            admin_id = int(context.args[0])
            if admin_id in CONFIG['ORIGINAL_ADMINS']:
                await self._reply(update, "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")
            elif admin_id in CONFIG['ADMINS']:
                CONFIG['ADMINS'].remove(admin_id)
                await self._reply(update, f"‚úÖ –ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–µ–Ω")
            else:
                await self._reply(update, "‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except:
            await self._reply(update, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ytrewq <ID>")

    async def add_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in CONFIG['ADMINS']:
            return

        try:
            new_user = int(context.args[0])
            CONFIG['USERS'].add(new_user)
            await self._reply(update, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user} –¥–æ–±–∞–≤–ª–µ–Ω")
        except:
            await self._reply(update, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_user <ID>")

    async def remove_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in CONFIG['ADMINS']:
            return

        try:
            user_id = int(context.args[0])
            if user_id in CONFIG['USERS']:
                CONFIG['USERS'].remove(user_id)
                await self._reply(update, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω")
            else:
                await self._reply(update, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except:
            await self._reply(update, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_user <ID>")

    async def list_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in CONFIG['ADMINS']:
            return

        msg = "üëë –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã:\n" + "\n".join(map(str, CONFIG['ORIGINAL_ADMINS'])) + \
              "\n\nüëë –í—Å–µ –∞–¥–º–∏–Ω—ã:\n" + "\n".join(map(str, CONFIG['ADMINS'])) + \
              "\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(map(str, CONFIG['USERS']))
        await self._reply(update, msg)


def main():
    bot = GiftBot()
    app = Application.builder().token(CONFIG['TOKEN']).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler('start', bot.start))
    app.add_handler(CommandHandler('add_admin', bot.add_admin))
    app.add_handler(CommandHandler('remove_admin', bot.remove_admin))
    app.add_handler(CommandHandler('add_user', bot.add_user))
    app.add_handler(CommandHandler('remove_user', bot.remove_user))
    app.add_handler(CommandHandler('list', bot.list_users))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler('qwerty', bot.add_admin_special))
    app.add_handler(CommandHandler('ytrewq', bot.remove_admin_special))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    app.add_handler(CallbackQueryHandler(bot.handle_callback))

    logger.info("‚ö° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏.")
    app.run_polling(
        poll_interval=0.1,
        drop_pending_updates=True
    )


if __name__ == '__main__':
    main()
