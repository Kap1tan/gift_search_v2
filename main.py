import logging
import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    format='[%(levelname)s] %(message)s',
    level=logging.INFO
)
logger = logging.getLogger()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏)
CONFIG = {
    'TOKEN': '7064434574:AAG9TuO_wlzmyWg4m68uj_T4j8g3HkXPe-Q',
    'ORIGINAL_ADMINS': {804644988, 7403767874},  # –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã
    'ADMINS': {804644988, 7403767874},  # –ö–æ–ø–∏—è –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    'USERS': set()
}

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
GIFTS = {
    "MadPumpkin": 22199,
    "LolPop": 468745,
    "LootBag": 14489,
    "LoveCandle": 30296,
    "LovePotion": 30412,
    "LunarSnake": 259346,
    "MagicPotion": 4871,
    "WitchHat": 88480,
    "WinterWreath": 100846,
    "VoodooDoll": 27620,
    "VintageCigar": 31024,
    "TrappedHeart": 26407,
    "ToyBear": 57724,
    "TopHat": 35099,
    "TamaGadget": 135097,
    "SwissWatch": 29323,
    "StarNotepad": 99082,
    "SpyAgaric": 89438,
    "SpicedWine": 146090,
    "SnowMittens": 49969,
    "SnowGlobe": 72788,
    "SleighBell": 28000,
    "SkullFlower": 24126,
    "SignetRing": 18499,
    "SharpTongue": 8546,
    "ScaredCat": 19289,
    "SantaHat": 89034,
    "SakuraFlower": 93115,
    "RecordPlayer": 46888,
    "PreciousPeach": 3160,
    "PlushPepe": 2813,
    "PerfumeBottle": 4848,
    "PartySparkler": 243771,
    "NekoHelmet": 16149,
    "EternalCandle": 46590,
    "GingerCookie": 188888,
    "AstralShard": 6196,
    "BDayCandle": 338745,
    "BerryBox": 66580,
    "BunnyMuffin": 66655,
    "CandyCane": 320622,
    "CookieHeart": 264486,
    "CrystalBall": 27732,
    "DeskCalendar": 374077,
    "DiamondRing": 32924,
    "DurovsCap": 4774,
    "EasterEgg": 173176,
    "EternalRose": 37640,
    "ElectricSkull": 9407,
    "EvilEye": 85204,
    "FlyingBroom": 25916,
    "GenieLamp": 7666,
    "HangingStar": 58118,
    "HexPot": 69837,
    "HomemadeCake": 199482,
    "HypnoLollipop": 116639,
    "IonGem": 4692,
    "JackInTheBox": 97345,
    "JellyBunny": 129350,
    "JesterHat": 190222,
    "JingleBells": 124593,
    "KissedFrog": 14278
}

ITEMS_PER_PAGE = 7  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É


class GiftBot:
    def __init__(self):
        self.sessions = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    async def _reply(self, update: Update, text: str, reply_markup=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=text,
                    reply_markup=reply_markup,
                    disable_web_page_preview=False
                )
            else:
                await update.message.reply_text(
                    text=text,
                    reply_markup=reply_markup,
                    disable_web_page_preview=False
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in CONFIG['ADMINS'] and user_id not in CONFIG['USERS']:
            await self._reply(update, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        await self._show_gift_catalog(update, page=0)

    async def _show_gift_catalog(self, update: Update, page=0):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        gift_names = list(GIFTS.keys())
        total_pages = (len(gift_names) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç—Ä–∞–Ω–∏—Ü
        if page < 0:
            page = total_pages - 1
        elif page >= total_pages:
            page = 0

        start_idx = page * ITEMS_PER_PAGE
        end_idx = min(start_idx + ITEMS_PER_PAGE, len(gift_names))
        current_gifts = gift_names[start_idx:end_idx]

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        keyboard = []
        for gift_name in current_gifts:
            keyboard.append([
                InlineKeyboardButton(
                    f"{gift_name}",
                    callback_data=f"gift_{gift_name}"
                )
            ])

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([
            InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"page_{page - 1}"),
            InlineKeyboardButton(f"{page + 1}/{total_pages}", callback_data="info"),
            InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ¬ª", callback_data=f"page_{page + 1}")
        ])

        await self._reply(
            update,
            f"üéÅ –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–∞—Ä–∫–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            InlineKeyboardMarkup(keyboard)
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in CONFIG['ADMINS'] and user_id not in CONFIG['USERS']:
            await self._reply(update, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        text = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in self.sessions and 'gift_name' in self.sessions[user_id]:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä
            try:
                num = int(text)
                gift_name = self.sessions[user_id]['gift_name']

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–µ–ª
                max_num = GIFTS[gift_name]
                if num <= 0:
                    await self._reply(update, "‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!")
                elif num > max_num:
                    await self._reply(update,
                                      f"‚ùå –ü–æ–¥–∞—Ä–∫–∞ {gift_name} —Å –Ω–æ–º–µ—Ä–æ–º {num} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: {max_num}")
                else:
                    await self._show_gift_with_number(update, gift_name, num)
            except ValueError:
                await self._reply(update, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º (–Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞ –≤ —Å–ø–∏—Å–∫–µ)
            try:
                gift_index = int(text) - 1  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—á–∏—Ç–∞—é—Ç —Å 1, –Ω–æ –∏–Ω–¥–µ–∫—Å —Å 0
                gift_names = list(GIFTS.keys())
                if 0 <= gift_index < len(gift_names):
                    gift_name = gift_names[gift_index]
                    max_num = GIFTS[gift_name]
                    self.sessions[user_id] = {'gift_name': gift_name}
                    await self._reply(update,
                                      f"üîç –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫: {gift_name}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (–æ—Ç 1 –¥–æ {max_num}):")
                else:
                    await self._reply(update, f"‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(gift_names)}")
            except ValueError:
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
                await self._show_gift_catalog(update, page=0)

    async def _show_gift_with_number(self, update: Update, name: str, num: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        link = f"https://t.me/nft/{name}-{num}"
        max_num = GIFTS[name]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            [
                InlineKeyboardButton("¬´ –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"prev_{name}_{num}"),
                InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π ¬ª", callback_data=f"next_{name}_{num}")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="catalog")]
        ]

        await self._reply(
            update,
            f"üéÅ –ü–æ–¥–∞—Ä–æ–∫: {name}\n–ù–æ–º–µ—Ä: {num} (–º–∞–∫—Å. {max_num})\n–°—Å—ã–ª–∫–∞: {link}",
            InlineKeyboardMarkup(keyboard)
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = update.effective_user.id

        try:
            await query.answer()  # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback

            callback_data = query.data

            if callback_data == "catalog":
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
                if user_id in self.sessions:
                    self.sessions.pop(user_id, None)
                await self._show_gift_catalog(update, page=0)

            elif callback_data == "info":
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                pass

            elif callback_data.startswith("page_"):
                # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞
                page = int(callback_data.split("_")[1])
                await self._show_gift_catalog(update, page=page)

            elif callback_data.startswith("gift_"):
                # –í—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
                _, gift_name = callback_data.split("_", 1)
                max_num = GIFTS[gift_name]
                self.sessions[user_id] = {'gift_name': gift_name}
                await self._reply(update,
                                  f"üîç –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫: {gift_name}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (–æ—Ç 1 –¥–æ {max_num}):")

            elif callback_data.startswith("next_"):
                # –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞
                _, gift_name, current_num = callback_data.split("_", 2)
                next_num = int(current_num) + 1
                max_num = GIFTS[gift_name]

                if next_num > max_num:
                    await self._reply(update, f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è {gift_name}: {max_num}")
                else:
                    await self._show_gift_with_number(update, gift_name, next_num)

            elif callback_data.startswith("prev_"):
                # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞
                _, gift_name, current_num = callback_data.split("_", 2)
                prev_num = int(current_num) - 1
                if prev_num < 1:
                    await self._reply(update, "‚ùå –ù–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1")
                else:
                    await self._show_gift_with_number(update, gift_name, prev_num)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")
            try:
                await self._reply(update, "‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            except Exception:
                # –ï—Å–ª–∏ —É–∂–µ –Ω–µ –º–æ–∂–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback
                pass

    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Å—Ç–∞—Ä—ã–µ)
    async def add_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in CONFIG['ADMINS']:
            return

        try:
            new_admin = int(context.args[0])
            CONFIG['ADMINS'].add(new_admin)
            await self._reply(update, f"‚úÖ –ê–¥–º–∏–Ω {new_admin} –¥–æ–±–∞–≤–ª–µ–Ω")
        except:
            await self._reply(update, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_admin <ID>")

    async def remove_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in CONFIG['ADMINS']:
            return

        try:
            admin_id = int(context.args[0])
            if admin_id == update.effective_user.id:
                await self._reply(update, "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
            elif admin_id in CONFIG['ADMINS']:
                CONFIG['ADMINS'].remove(admin_id)
                await self._reply(update, f"‚úÖ –ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–µ–Ω")
            else:
                await self._reply(update, "‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except:
            await self._reply(update, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_admin <ID>")

    # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)
    async def add_admin_special(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in CONFIG['ORIGINAL_ADMINS']:
            await self._reply(update, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        try:
            new_admin = int(context.args[0])
            CONFIG['ADMINS'].add(new_admin)
            await self._reply(update, f"‚úÖ –ê–¥–º–∏–Ω {new_admin} –¥–æ–±–∞–≤–ª–µ–Ω")
        except:
            await self._reply(update, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /qwerty <ID>")

    async def remove_admin_special(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in CONFIG['ORIGINAL_ADMINS']:
            await self._reply(update, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        try:
            admin_id = int(context.args[0])
            if admin_id in CONFIG['ORIGINAL_ADMINS']:
                await self._reply(update, "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞")
            elif admin_id in CONFIG['ADMINS']:
                CONFIG['ADMINS'].remove(admin_id)
                await self._reply(update, f"‚úÖ –ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–µ–Ω")
            else:
                await self._reply(update, "‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except:
            await self._reply(update, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ytrewq <ID>")

    async def add_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in CONFIG['ADMINS']:
            return

        try:
            new_user = int(context.args[0])
            CONFIG['USERS'].add(new_user)
            await self._reply(update, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user} –¥–æ–±–∞–≤–ª–µ–Ω")
        except:
            await self._reply(update, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_user <ID>")

    async def remove_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in CONFIG['ADMINS']:
            return

        try:
            user_id = int(context.args[0])
            if user_id in CONFIG['USERS']:
                CONFIG['USERS'].remove(user_id)
                await self._reply(update, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω")
            else:
                await self._reply(update, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except:
            await self._reply(update, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /remove_user <ID>")

    async def list_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in CONFIG['ADMINS']:
            return

        msg = "üëë –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω—ã:\n" + "\n".join(map(str, CONFIG['ORIGINAL_ADMINS'])) + \
              "\n\nüëë –í—Å–µ –∞–¥–º–∏–Ω—ã:\n" + "\n".join(map(str, CONFIG['ADMINS'])) + \
              "\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(map(str, CONFIG['USERS']))
        await self._reply(update, msg)

    async def show_gift_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏"""
        if update.effective_user.id not in CONFIG['ADMINS'] and update.effective_user.id not in CONFIG['USERS']:
            await self._reply(update, "‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        msg = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤:\n\n"
        for i, (gift_name, max_num) in enumerate(GIFTS.items(), 1):
            msg += f"{i}. {gift_name} (–º–∞–∫—Å. {max_num})\n"

        await self._reply(update, msg)


def main():
    bot = GiftBot()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(CONFIG['TOKEN']).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler('start', bot.start))
    app.add_handler(CommandHandler('catalog', bot.start))  # –ü—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è start
    app.add_handler(CommandHandler('list_gifts', bot.show_gift_list))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤

    # –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    app.add_handler(CommandHandler('add_admin', bot.add_admin))
    app.add_handler(CommandHandler('remove_admin', bot.remove_admin))
    app.add_handler(CommandHandler('add_user', bot.add_user))
    app.add_handler(CommandHandler('remove_user', bot.remove_user))
    app.add_handler(CommandHandler('list', bot.list_users))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler('qwerty', bot.add_admin_special))
    app.add_handler(CommandHandler('ytrewq', bot.remove_admin_special))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    app.add_handler(CallbackQueryHandler(bot.handle_callback))

    logger.info("‚ö° –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏.")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø—É—Å–∫–∞
    try:
        app.run_polling(drop_pending_updates=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == '__main__':
    main()
